
set_names = [ 'In Vitro HYTANE', 'In Vitro LATE', 'Merops', 'In vivo LATE', 'In vivo HYTANE' ]

rule all:
    input:
        "output/jitter.svg",
        "output/dotplot.svg",
        "output/rrvgo.pdf",
        "output/rrvgo.csv",
        expand("output/logo/{set}.pdf", set = set_names)

rule plot:
    input:
        "input/Test2_cleavages.xlsx"
    output:
        jit = "output/jitter.svg",
        dot = "output/dotplot.svg"
    script:
        "scripts/plot.R"

rule uniprot:
    output:
        "analysis/uniprot_go/uniprot.tsv"
    params:
        fields = "accession,reviewed,id,protein_name,gene_names,go_id",
        organism = 9606
    conda:
        "envs/tools.yaml"
    shell:
        "wget -O {output} 'https://rest.uniprot.org/uniprotkb/stream?compressed=false&download=true&fields={params.fields}&format=tsv&query=(organism_id:{params.organism})'"

rule dload_obo:
    output:
        "analysis/uniprot_go/go.obo"
    conda:
        "envs/tools.yaml"
    shell:
        "wget -O {output} http://purl.obolibrary.org/obo/go.obo"

rule obo_to_tsv:
    input:
        "analysis/uniprot_go/go.obo"
    output:
        "analysis/uniprot_go/go.tsv"
    conda:
        "envs/r_viseago.yaml"
    script:
        "scripts/obo2tsv.R"

rule goterms:
    input:
        "analysis/uniprot_go/uniprot.tsv"
    output:
        "analysis/uniprot_go/gene2GO.txt"
    conda:
        "envs/tools.yaml"
    shell:
        "csvcut -tc 'Entry,Gene Ontology IDs' {input} | csvformat -TK1 | tr ';' ',' > {output}"

rule human_crap:
    input:
        "input/HUMAN_CRAP.fasta"
    output:
        "analysis/uniprot_go/HUMAN_CRAP.txt"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit fx2tab -n -o {output} {input}"

rule degrabase_caspase:
    input:
        "input/degrabase.csv"
    output:
        "analysis/degrabase/caspase.csv"
    conda:
        "envs/tools.yaml"
    shell:
        "csvgrep -c 'Sample Table::Perturbagen' -im None {input} | csvgrep -c P1 -m D > {output}"

rule enrichment_calc:
    input:
        data    = "input/Unreproted putative substrates Casp3.xlsx", # Casapse_Rawad_LATE.xlsx
        casbah  = "input/casbah.csv",
        degrab  = "analysis/degrabase/caspase.csv",
        merops  = "input/utf merops.csv",
        topfind = "input/topfind_caspase_3.csv",
        gene2GO = "analysis/uniprot_go/gene2GO.txt",
        aliases = "input/aliases.txt",
        uniprot = "analysis/uniprot_go/uniprot.tsv",
        all_proteins = "analysis/uniprot_go/HUMAN_CRAP.txt",
        idd_proteins = "input/ProteinIDs"
    output:
        venn = "output/venn.pdf",
        rds = "analysis/uniprot_go/data.rds"
    params:
        q_val = 0.01,
        genome = "org.Hs.eg.db",
        sets = [ "Unreported", "Unreported+high ratio" ]
    conda:
        "envs/r.yaml"
    script:
        "scripts/enrichment.R"

rule enrichment_plot:
    input:
        "analysis/uniprot_go/data.rds"
    output:
        fig = "output/rrvgo.pdf",
        csv = "output/rrvgo.csv"
    conda:
        "envs/r.yaml"
    script:
        "scripts/enrichment_plot.R"

rule logo_format:
    input:
        xlsx = "input/Sequence Logo for Andrey 20220901.xlsx",
        proteome = "input/HUMAN_CRAP.fasta"
    output:
        "analysis/logo/{set}.rds"
    params:
        residues = 4
    conda:
        "envs/r.yaml"
    script:
        "scripts/logo_format.R"

rule logo_plot:
    input:
        rds = "analysis/logo/{set}.rds",
        proteome = "input/HUMAN_CRAP.fasta"
    output:
        "output/logo/{set}.pdf"
    conda:
        "envs/r.yaml"
    script:
        "scripts/logo_plot.R"

rule logo_compose:
    input:
        expand("analysis/logo/{set}.svg", set = set_names)
    output:
        "output/logo.svg"
    params:
        labels = set_names
    conda:
        "envs/svgutils.yaml"
    script:
        "scripts/logo_compose.py"
